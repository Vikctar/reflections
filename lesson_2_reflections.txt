What happens when you initialize a repository? Why do you need to do it?
	An empty repo is created. The repo is not necessarily empty,
	but it contains untracked files.
	Initializing creates a repo that will help track changes made
	to a particular directory.
	
How is the staging area differnt from the working directory and the repository?
What value do you think it offers?
	The staging area holds files before they are committed to the repository.
	It is an intermediate area that acts as a buffer zone to the repo.

How can you use the staging area to make sure you have one commit per logical change?
	Using git diff --staged to double check the changes to be committed.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
	When working on a chnange that is not too critical to your program,
	or you are not sure whether the changes you want to make will work
	or not.
	Branches make it easier to work on your program i.e introduce changes,
	and still be able to checkout the last known working commit.

How fo the diagrams help you visualize the branch structure?
	Diagrams help make a visual representation of the branches
	and how different commits relate.

What is the result of merging two branches together? Why do we present it in the diagram the
way we do?
	A new commit is created that has information about both of its
	parents. Presenting it in a diagram shows relation between commits

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
	Auto merging can save you alot of time. Manual merge can be tidious,
	if multiple contributors are involved.

	Auto merge's downside is for example if a line was deleted in one branch
	and another branch used that line say in a function call, during merging,
	the two would get merged with no conflict. This might result in code not
	compiling.
