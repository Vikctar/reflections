When would you want to create a remote repository rather than keeping all your work local?
    Remote repos help me keep backups of my project. They are also good when sharing
    code with others. It is also a good way of keeping my work updated in all the
    computers I use.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?
    Pulling manually helps me make sure that any change i pull, is a working one.
    A new version will not always be a working version. So having it pulled 
    automatically might mean one more bug to fix.

Describe the difference between forks, clones, and branches. When would you use
one instead of another?
    They all affect an existing version. Forking copies an entire repo to 
    a new location and so does cloning. Forking works only on a GitHub repo
    which can only be forked to another repo on GitHub while cloning works 
    on any Git repository which you can clone to anywhere you have access to.
    With branches, changes made are added in the same repository.

    I would fork a repo on GitHub if i didn't have the permission to change the
    original. Clone when I want to work locally on my computer. Branching comes
    in handy when I need to make changes to a repository but still have access to
    to previous verison  

What is the benefit of having a copy of the last known state of the remote stored locally?
    It makes it easier to work even when I have no internet access. It makes it easy for
    me to know what is the latest remote version.

How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?
    I would suggest using DropBox. Although it would be had keeping track of changes
    that have been made to the project. If the change made was on a specific part of
    of the project then avoiding messing with each others changes would be very difficult.

    I don't know of any other real-time collaborative editor that would work very well
    with code.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
    When working/collaborating with a lot of people say more than three, it would be better
    to make those changes in a separate branch than on master. This makes it easy to review
    and track changes before they can be accepted into the master branch.
    Making changes directly on master is suitable if the team is small or when working alone.
